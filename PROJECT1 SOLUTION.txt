-- CREATING A SCHOOL DATABASE USING THE REQUEST GIVEN BY THE SCHOOL ADMINISTRATOR
-- CREATING DATABASE
CREATE DATABASE SCHOOLDB;

-- CREATE STUDENT TABLE
CREATE TABLE STUDENT ( STUD_ID INT NOT NULL,
FIRSTNAME VARCHAR(50) NOT NULL,
LASTNAME VARCHAR(50) NOT NULL,
DOB DATE NOT NULL,
CITY VARCHAR(50) NOT NULL,
STATE VARCHAR(50) NOT NULL,
INSTR_ID VARCHAR(6) NOT NULL,
PHONE VARCHAR(10) NOT NULL,
GENDER CHAR(1) NOT NULL);

-- CREATING INSTRUCTOR TABLE
CREATE TABLE INSTRUCTOR ( INSTR_ID VARCHAR(6) NOT NULL,
FIRSTNAME VARCHAR(50) NOT NULL,
LASTNAME VARCHAR(50) NOT NULL,
COURSE_ID VARCHAR(6) NOT NULL);

-- CREATING COURSE TABLE
CREATE TABLE COURSE (
COURSE_ID VARCHAR(6) NOT NULL,
COURSENAME VARCHAR(20) NOT NULL,
COURSECREDIT INT NOT NULL,
CLASSSIZE INT NULL);

-- CREATING STUDENT LEADERSHIP TABLE
CREATE TABLE LEADERSHIP (
STUD_EXEC_ID INT NOT NULL,
FIRSTNAME VARCHAR(50) NOT NULL,
LASTNAME VARCHAR(50) NOT NULL,
STUD_ID INT NOT NULL,
TITLE VARCHAR(50) NOT NULL);

-- CREATING GRADE TABLE
CREATE TABLE GRADE (
LETTER_GRADE CHAR(1) NOT NULL,
SCORE INT NOT NULL);

-- CREATING STUDENT GRADE TTABLE
CREATE TABLE STUDENTGRADE (
STUD_ID INT NOT NULL,
LETTER_GRADE CHAR(1) NOT NULL,
COURSE_ID VARCHAR(6) NOT NULL,
INSTR_ID VARCHAR(6) NOT NULL);

-- ADDING PRIMARY KEY CONSTRAINT TO OUR TABLES
-- STUDENT TABLE
ALTER TABLE STUDENT
ADD CONSTRAINT PK_STUD_ID_STUDENT PRIMARY KEY (STUD_ID);

-- INSTRUCTOR TABLE
ALTER TABLE INSTRUCTOR
ADD CONSTRAINT PK_INSTR_ID_INSTRUCTOIR PRIMARY KEY (INSTR_ID);

-- COURSE TABLE
ALTER TABLE COURSE
ADD CONSTRAINT PK_COURSE_ID_COURSE PRIMARY KEY (COURSE_ID);

-- LEADERSHIP TABLE
ALTER TABLE LEADERSHIP
ADD CONSTRAINT PK_STUD_EXEC_ID PRIMARY KEY (STUD_EXEC_ID);

-- GRADE TABLE
ALTER TABLE GRADE
ADD CONSTRAINT PK_LETTER_GRADE_GRADE PRIMARY KEY (LETTER_GRADE);

-- STUDENT GRADE TABLE
ALTER TABLE STUDENTGRADE
ADD CONSTRAINT PK_STUD_ID_STUDENGRADE PRIMARY KEY (STUD_ID);

-- ADDING FOREIGN KEY TO OUR TABLES
-- ADDING FOREIGN KEY TO THE INSTRUCTOR TABLE
ALTER TABLE INSTRUCTOR
ADD CONSTRAINT FK_COURSE_ID_INSTRUCTOR FOREIGN KEY (COURSE_ID)
REFERENCES COURSE(COURSE_ID);

-- STUDENT TABLE
ALTER TABLE STUDENT
ADD CONSTRAINT FK_INSTR_ID_STUDENT FOREIGN KEY (INSTR_ID)
REFERENCES INSTRUCTOR(INSTR_ID);

-- LEADERSHIP TABLE
ALTER TABLE LEADERSHIP
ADD CONSTRAINT FK_STUD_ID_LEADERSHIP FOREIGN KEY (STUD_ID)
REFERENCES STUDENT(STUD_ID);

-- STUDENT GRADE TABLE
ALTER TABLE STUDENTGRADE
ADD CONSTRAINT FK_LETTER_GRADE_STUDENTGRADE FOREIGN KEY (LETTER_GRADE)
REFERENCES GRADE(LETTER_GRADE);

--STUDENT GRADE TABLE 
ALTER TABLE STUDENTGRADE
ADD CONSTRAINT FK_COURSE_ID_STUDENTGRADE FOREIGN KEY (COURSE_ID)
REFERENCES COURSE(COURSE_ID);

-- STUDENT GRADE TABLE
ALTER TABLE STUDENTGRADE
ADD CONSTRAINT FK_INSTR_ID_STUDENTGRADE FOREIGN KEY (INSTR_ID)
REFERENCES INSTRUCTOR(INSTR_ID);


-- CHANGING THE DATA TYPE OS THE SCORE COLUMN IN THE GRADE TABLE TO VARCHAR(20)
ALTER TABLE GRADE
ALTER COLUMN SCORE VARCHAR(20) NOT NULL;

-- INSERTING RECORDS INTO THE GRADE TABLE
INSERT INTO GRADE (Letter_Grade, Score)
VALUES ('A', '90 - 100'),

('B', '85 - 89'),

('C', '80 - 84'),

('D', '70 - 79'),

('E', '60 - 69'),

('F', '0 - 59');

-- INSERTING RECORD INTO COURSE TABEL
Insert Into Course (Course_id, Coursename, COURSECREDIT, Classsize)

Values ('Soc101', 'Fundamentals of Sociology', '3', '30'),

('SQL102', 'Database Fundamentals', '3', '25'),

('His304', 'Intermediate US History', '3', '15'),

('Soc401', 'Advanced Sociology', '3', '40'),

('Phi400', 'Advanced Philosophy', '3', '20');

-- MODIFY THE COURSENAME COLUMN TO ACCEPT LONGER CHARACTER VALUE
ALTER TABLE COURSE
ALTER COLUMN COURSENAME VARCHAR(30) NOT NULL;

-- INSERT RECORD INTO INSTRUCTOR TABLE
Insert Into Instructor (Instr_id, Firstname, LastName, Course_id)

Values ('In10001', 'ADELEYE', 'ADEWUYI', 'SQL102'),

('In10002', 'Martin', 'Gold', 'Phi400'),

('In10003', 'Venkata', 'Josyam', 'Soc101'),

('In10004', 'Bharath', 'Mandadi', 'His304'),

('In10005', 'Eric', 'Forson', 'Soc401');

-- MODIFYING THE INSTRUCTOR TABLE INSTR_ID COLUMN TO ACCOMODATE LONGER VALUE
ALTER TABLE INSTRUCTOR
ALTER COLUMN INSTR_ID VARCHAR(7) NOT NULL;

-- MODIFY STUDENT TABLE INSTR_ID COLUMN
ALTER TABLE STUDENT
ALTER COLUMN INSTR_ID VARCHAR(7) NOT NULL;

-- MODIFY STUDENTGRADE TABLE
ALTER TABLE STUDENTGRADE
ALTER COLUMN INSTR_ID VARCHAR(7) NOT NULL;

-- TO ALTER THE INSTR_ID COLUMN OF INSTRUCTOR TABLE, WE NEED TO DROP THE RELATIONSHIP AND
-- THEN MODIFY THE DATA TYPE
-- DROPPING INSTR_ID FOREIGN KEY IN STUDENT AND STUDENT GRADE TABLE
-- STUDENT TABLE
ALTER TABLE STUDENT
DROP CONSTRAINT FK_INSTR_ID_STUDENT;

-- STUDENTGRADE TABLE
ALTER TABLE STUDENTGRADE
DROP CONSTRAINT FK_INSTR_ID_STUDENTGRADE;

-- DROPPING FOREIGN KEY COURSE_ID
ALTER TABLE INSTRUCTOR
DROP CONSTRAINT FK_COURSE_ID_INSTRUCTOR;

-- ADDING RECORD TO STUDENT LEADERSHIP TABLE 
Alter Table Leadership
Alter Column FirstName Varchar(50);

Alter Table Leadership
Alter Column LastName Varchar(50);

Insert Into Leadership (Stud_id, Stud_exec_id, Title)

Values (7, '100', 'President'),

(2, '101', 'Vice President'),

(4, '102', 'Secretary'),

(3, '103', 'Treasurer'),

(11, '104', 'Advisor'),

(16, '105', 'Organizer');


-- INSERTING RECORD INTO STUDENTGRADE TABLE
Insert Into StudentGrade (Stud_id, Letter_Grade, Course_id)

Values (1, 'A', 'Soc401'),
(2, 'B', 'Phi400'),
(3, 'B', 'His304'),
(4, 'A', 'SQL102'),
(5, 'C', 'Soc101'),
(6, 'D', 'His304'),
(7, 'B', 'Phi400'),
(8, 'A', 'SQL102'),
(9, 'C', 'Soc401'),
(10, 'A', 'SQL102'),
(11, 'D', 'His304'),
(12, 'F', 'Soc101'),
(13, 'A', 'SQL102'),
(14, 'A', 'His304'),
(15, 'B', 'SQL102'),
(16, 'C', 'His304');

-- MAKING INSTR_ID NULL
ALTER TABLE STUDENTGRADE
ALTER COLUMN INSTR_ID VARCHAR(7) NULL;

-- INSERT INTO STUDNET TABLE
Insert Into Student (Stud_id, Firstname, LastName, DOB, City, State, Instr_id, Phone, Gender)

Values (1, 'Joseph', 'Ahene','11/25/1980', 'Baltimore', 'Maryland', 'In10004', '4321053421', 'M'),

(2, 'Precious', 'Owusu','09/11/1982', 'Columbia', 'Maryland', 'In10003', '4321762243', 'F'),

(3, 'Eni', 'Edo','01/06/1979', 'Bronx', 'New York', 'In10002', '5011053421', 'F'),

(4, 'Felix', 'Emeka','12/01/1984', 'Newark', 'New Jersey', 'In10005', '7011762243', 'M'),

(5, 'Mercy', 'Johnson','04/20/1981', 'Wilmington', 'Delaware', 'In10005', '3011053421', 'F'),

(6, 'Lilian', 'Asong','08/19/1986', 'Owing Mills', 'Maryland', 'In10003', '4321761432', 'F'),

(7, 'Prince', 'Williams','06/04/1989', 'Silver Spring', 'Maryland', 'In10004', '4324432211', 'M'),

(8, 'Grace', 'Bonnie','05/13/1985', 'Knoxville', 'Tennessee', 'In10001', '8651762243', 'F'),

(9, 'Leomie', 'Titus','05/20/1986', 'Nashville', 'Tennessee', 'In10001', '8651053421', 'F'),

(10, 'Magic', 'Johnson','09/01/1978', 'Falls Church', 'Virginia', 'In10002', '7241762243', 'M'),

(11, 'Henry', 'Edwards','02/12/1983', 'Boston', 'Massachusetts', 'In10002', '9031053421', 'M'),

(12, 'George', 'Phillips','12/04/1980', 'San Franscisco', 'California', 'In10001', '4631762241', 'M'),

(13, 'Frederick', 'Benson','01/01/1978', 'Wilmington', 'Delaware', 'In10003', '3011222411', 'M'),

(14, 'Christy', 'Jones','10/10/1991', 'Frederick', 'Maryland', 'In10005', '4321764444', 'F'),

(15, 'Princess', 'Brown','06/04/1989', 'Tulsa', 'Oklahoma', 'In10001', '4234432211', 'F'),

(16, 'Hillary', 'Morgan','11/13/1990', 'Tampa', 'Florida', 'In10001', '6411765432', 'F');


-- INSERTING NEW STUDENT RECORD
INSERT INTO STUDENT
VALUES (17, 'JAMAL', 'IDOWU', '01/01/2000', 'DALLAS', 'TEXAS', 'IN10003', '1234567890', 'M');

-- UPDATING STUDENT RECORD
UPDATE STUDENT
SET LASTNAME = 'BASONG'
WHERE STUD_ID = 6;

-- UPDATING STUDENT GRADE TABLE
UPDATE STUDENTGRADE
SET INSTR_ID = INSTRUCTOR.INSTR_ID
FROM STUDENTGRADE, INSTRUCTOR
WHERE STUDENTGRADE.COURSE_ID = INSTRUCTOR.COURSE_ID;

-- UPDATING THE FIRST AND LAST NAME COLUMN OF STUDENT LEADERSHIP TABLE
UPDATE LEADERSHIP
SET FIRSTNAME = STUDENT.FIRSTNAME
FROM STUDENT, LEADERSHIP
WHERE LEADERSHIP.STUD_ID = STUDENT.STUD_ID;

UPDATE LEADERSHIP
SET LASTNAME = STUDENT.LASTNAME
FROM STUDENT, LEADERSHIP
WHERE LEADERSHIP.STUD_ID = STUDENT.STUD_ID;


-- WRITE A QUERY TO PULL THE ENTIRE STUDENT RECORD WITH THEIR INSTRUCTOR NAME, 
-- LEADERSHIP POSITION AND ALL OTHER ATTRIBUTES.
SELECT S.STUD_ID, S.FIRSTNAME, S.LASTNAME, S.DOB, S.CITY, S.STATE, S.PHONE, S.GENDER,
SG.COURSE_ID, SG.LETTER_GRADE, C.COURSENAME, C.COURSECREDIT, 
CONCAT(I.FIRSTNAME, ' ', I.LASTNAME) AS [INSTRUCTOR NAME]
FROM STUDENT S
JOIN STUDENTGRADE SG
ON S.STUD_ID = SG.STUD_ID
JOIN COURSE C
ON SG.COURSE_ID = C.COURSE_ID
JOIN INSTRUCTOR I
ON C.COURSE_ID = I.COURSE_ID








